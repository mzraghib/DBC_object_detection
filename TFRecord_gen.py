"""
Created on Thu Jun 28 12:01:20 2018
Root is the BDD direcrtoty


Parse the text file generated by running bdd-data-master/bdd_data/label2det.py on an all the images : 

$ python3 label2det.py ~/DBC/BDD/temp_data/bdd100k/labels/100k/train/ ~/DBC/BDD/temp_data/bdd100k/labels/100k/train_labels



Example to run:
    
    $ python TFRecord_gen.py 
"""
import json
import tensorflow as tf
import sys    
import os
from object_detection.utils import dataset_util


flags = tf.app.flags

# flags.DEFINE_string ==> name, default, help message
flags.DEFINE_string('output_path', '/home/zuhayr/DBC/BDD/data.tfrecords', 'output file location')
FLAGS = flags.FLAGS

images_directory = '/home/zuhayr/DBC/BDD/temp_data/bdd100k/images/100k/train'

# TODO(me): Read file name from the command line and don't use absolute paths
label_filename = '/home/zuhayr/DBC/BDD/temp_data/bdd100k/labels/100k/train_labels.json'



def find_class_num(classes_text):
    '''
    find class id given the calss name
    '''
    class_num = 0
    #TODO(me): see if improvement can be made, or else fix the folder structure
    sys.path.insert(0, '/home/zuhayr/DBC/BDD/bdd-data-master/bdd_data')
    from label import labels
    
    for i in range(len(labels)):
        if labels[i][0] == classes_text:
            class_num = labels[i][1] 
            break
    
    
    return class_num

#def _float_feature(value):
#  return tf.train.Feature(float_list=tf.train.FloatList(value=value))
#
#def _int64_feature(value):
#  return tf.train.Feature(int64_list=tf.train.Int64List(value=value))

def _bytes_feature(value):
  return tf.train.Feature(bytes_list=tf.train.BytesList(value=value))

# Taken from tensorflow docs:
# https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/using_your_own_dataset.md
def create_tf_example(encoded_image_data):
    '''
     Creates a tf.Example proto from images.

    Args:
        encoded_image_data: The jpg encoded data of the image.

    Returns:
        example: The created tf.Example.
    '''
#    filename = '/home/zuhayr/DBC/BDD/temp_data/bdd100k/images/100k/train/0a0a0b1a-7c39d841.jpg'
    image_format = b'jpeg'
    
    # TODO(me): Read file name from the command line and don't use absolute paths
    filename = os.path.join(images_directory, str(encoded_image_data['name']) + '.jpg')#.decode()

    filename = str.encode(filename)


    with tf.gfile.GFile(filename, 'rb') as fid:
        encoded_jpg = bytes(fid.read())


    height = 720
    width = 1280

    
    xmins = [encoded_image_data['bbox'][0] / width]
    xmaxs = [encoded_image_data['bbox'][2] / width]
    ymins = [encoded_image_data['bbox'][1] / height]
    ymaxs = [encoded_image_data['bbox'][3] / height]
    classes_text = [str.encode(encoded_image_data['category'])]
    
    calss_num = find_class_num(classes_text)
    classes = [calss_num]
    
    tf_example = tf.train.Example(features=tf.train.Features(feature={
    'image/height': dataset_util.int64_feature(height),
    'image/width': dataset_util.int64_feature(width),
    'image/filename': dataset_util.bytes_feature(filename),
    'image/source_id': dataset_util.bytes_feature(filename),
    'image/encoded': dataset_util.bytes_feature(encoded_jpg),
    'image/format': dataset_util.bytes_feature(image_format),
    'image/object/bbox/xmin': dataset_util.float_list_feature(xmins),
    'image/object/bbox/xmax': dataset_util.float_list_feature(xmaxs),
    'image/object/bbox/ymin': dataset_util.float_list_feature(ymins),
    'image/object/bbox/ymax': dataset_util.float_list_feature(ymaxs),
    'image/object/class/text': dataset_util.bytes_list_feature(classes_text),
    'image/object/class/label': dataset_util.int64_list_feature(classes),
    }))
    return tf_example



def main(_):
    
    # Load the json labels file, after processing with modified 
    # bdd-data-master/bdd_data/label2det.py
    with open(label_filename) as f:
        examples = json.load(f)

    writer = tf.python_io.TFRecordWriter(FLAGS.output_path)


    for example in examples:
        tf_example = create_tf_example(example)
        writer.write(tf_example.SerializeToString())

    writer.close()

    print('Finished processing all images')

if __name__ == '__main__':
    tf.app.run()
    main()
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    